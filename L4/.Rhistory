for(t in 1:length(a$date)){
if (nchar(a$date[t])==9){
x=substr(a$date[t],6,6)
x=paste0(c('0',x),collapse='')
a$date[t]=paste0(c(substr(a$date[t],1,4),x,substr(a$date[t],8,9)),collapse = '-')
}else{
a$date[t]=paste0(c(substr(a$date[t],1,4),substr(a$date[t],6,7),substr(a$date[t],9,10)),collapse = '-')
}
}
a=a %>% select(date,prc)
sma50200=function(a){
a=a %>% select(date,prc) %>% arrange(date) %>%
mutate(date=as.Date(date),sma50=rollmean(prc,k=50,fill=NA,align='right'),sma200=rollmean(prc,k=200,fill=NA,align='right')) %>%
filter(!is.na(sma200))
return(a)
}
b=sma50200(a)
View(b)
a=a %>% select(date,prc) %>% arrange(date) %>%
mutate(date=as.Date(date),sma50=rollmean(prc,k=50,fill=NA,align='right'))
a$prc=as.numeric(a$prc)
b=a
b=sma50200(a)
a=a %>% filter(date>='2016-01-01')
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='SMA')
lines(a$sma50~a$date,col='red')
lines(a$sma200~a$date,col='blue')
legend('topleft',c('prc','sma50','sma200'),lty=c(1,1,1),col=c('black','red','blue'))
a=sma50200(a)
a=a %>% filter(date>='2016-01-01')
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='SMA')
lines(a$sma50~a$date,col='red')
lines(a$sma200~a$date,col='blue')
legend('topleft',c('prc','sma50','sma200'),lty=c(1,1,1),col=c('black','red','blue'))
plot(a$prc~a$date,type='l',ylab='Price',xlab='date',main='华为概念指数')
plot(a$prc~a$date,type='l',ylab='Price',xlab='date',main='huawei concept Index')
bb=function(a){
a=a %>% select(date,prc) %>% arrange(date) %>%
mutate(date=as.Date(date),avg=rollmean(prc,k=20,fill=NA,align='right')) %>%
mutate(sd=rollapply(prc,width=20,fill=NA,align='right',FUN=sd,na.rm=T)) %>% filter(!is.na(avg)) %>% mutate(up=avg+2*sd,down=avg-2*sd)
return(a)
}
a=bb(a)
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='bb',ylim=range(a[,c('prc','up','down')]))
lines(a$avg~a$date,col='blue')
lines(a$up~a$date,col='red')
lines(a$down~a$date,col='red')
legend('bottomright',c('prc','avg','up','down'),lty=c(1,1,1,1),col=c('black','blue','red','red'))
a=a %>% filter(substr(date,1,4)=='2019')
a=a %>% filter(substr(date,1,4)=='2019')
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='bb',ylim=range(a[,c('prc','up','down')]))
lines(a$avg~a$date,col='blue')
lines(a$up~a$date,col='red')
lines(a$down~a$date,col='red')
legend('bottomright',c('prc','avg','up','down'),lty=c(1,1,1,1),col=c('black','blue','red','red'))
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='Bollinger Band',ylim=range(a[,c('prc','up','down')]))
lines(a$avg~a$date,col='blue')
lines(a$up~a$date,col='red')
lines(a$down~a$date,col='red')
legend('bottomright',c('prc','avg','up','down'),lty=c(1,1,1,1),col=c('black','blue','red','red'))
a <- read_excel("~/Downloads/中国平安601318.SH.xlsx")
substr(a$日期,1,4)
a$日期=NULL
names(a)=c('date','a1','a2','a3','prc','a4','a5','a6')
a=a %>% select(date,prc)
for(t in 1:length(a$date)){
if (nchar(a$date[t])==9){
x=substr(a$date[t],6,6)
x=paste0(c('0',x),collapse='')
a$date[t]=paste0(c(substr(a$date[t],1,4),x,substr(a$date[t],8,9)),collapse = '-')
}else{
a$date[t]=paste0(c(substr(a$date[t],1,4),substr(a$date[t],6,7),substr(a$date[t],9,10)),collapse = '-')
}
}
a$date=as.Date(a$date)
rsi=function(a){
a=a %>% select(date,prc) %>% arrange(date) %>% mutate(delta=prc-lag(prc,1),up=ifelse(delta>0,1,0),down=ifelse(delta<0,1,0)) %>%
mutate(up=delta*up,down=-delta*down) %>%
mutate(upa=rollmean(up,k=20,fill=NA,align='right',na.rm=T),downa=rollmean(down,k=20,fill=NA,align='right',na.rm=T))
for (t in 21:length(a$date)){
a$upa[t]=a$upa[t-1]*19/20+a$up[t]/20
a$downa[t]=a$downa[t-1]*19/20+a$down[t]/20
}
a=a %>% mutate(rs=upa/downa) %>% mutate(rsi=100-100/(1+rs))
return(a)
}
a=rsi(a)
a$prc=as.numeric(a$prc)
a=rsi(a)
a=a %>% filter(substr(date,1,4)=='2019')
plot(a$rsi~as.Date(a$date),type='l',ylab='rsi',xlab='date',main='rsi',ylim=c(0,100))
abline(h=c(30,70),col='red')
plot(a$rsi~as.Date(a$date),type='l',ylab='RSI',xlab='date',main='rsi',ylim=c(0,100))
abline(h=c(30,70),col='red')
a=a %>% filter(substr(date,1,4)=='2019')
plot(a$rsi~as.Date(a$date),type='l',ylab='RSI',xlab='date',main='rsi',ylim=c(0,100))
abline(h=c(30,70),col='red')
plot(a$rsi~as.Date(a$date),type='l',ylab='Price',xlab='date',main='RSI',ylim=c(0,100))
abline(h=c(30,70),col='red')
library(readxl)
huawei <- read_excel("Downloads/华为概念指数8841007.WI.xlsx")
View(huawei)
a <- read_excel("Downloads/华为概念指数8841007.WI.xlsx")
substr(a$日期,1,4)
a$日期=NULL
names(a)=c('date','a1','a2','a3','prc','a4','a5','a6')
a=a %>% select(date,prc)
for(t in 1:length(a$date)){
if (nchar(a$date[t])==9){
x=substr(a$date[t],6,6)
x=paste0(c('0',x),collapse='')
a$date[t]=paste0(c(substr(a$date[t],1,4),x,substr(a$date[t],8,9)),collapse = '-')
}else{
a$date[t]=paste0(c(substr(a$date[t],1,4),substr(a$date[t],6,7),substr(a$date[t],9,10)),collapse = '-')
}
}
a$date=as.Date(a$date)
a$prc=as.numeric(a$prc)
a=sma50200(a)
a=a %>% select(date,prc)
names(a)=c('date','a1','a2','a3','prc','a4','a5','a6','a7')
a=a %>% select(date,prc)
for(t in 1:length(a$date)){
if (nchar(a$date[t])==9){
x=substr(a$date[t],6,6)
x=paste0(c('0',x),collapse='')
a$date[t]=paste0(c(substr(a$date[t],1,4),x,substr(a$date[t],8,9)),collapse = '-')
}else{
a$date[t]=paste0(c(substr(a$date[t],1,4),substr(a$date[t],6,7),substr(a$date[t],9,10)),collapse = '-')
}
}
a$date=as.Date(a$date)
a$prc=as.numeric(a$prc)
a=sma50200(a)
plot(a$prc~a$date,type='l',ylab='Price',xlab='date',main='huawei concept Index')
a=a %>% filter(date>='2016-01-01')
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='SMA')
lines(a$sma50~a$date,col='red')
lines(a$sma200~a$date,col='blue')
legend('topleft',c('prc','sma50','sma200'),lty=c(1,1,1),col=c('black','red','blue'))
a=bb(a)
a=a %>% filter(substr(date,1,4)=='2019')
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='Bollinger Band',ylim=range(a[,c('prc','up','down')]))
lines(a$avg~a$date,col='blue')
lines(a$up~a$date,col='red')
lines(a$down~a$date,col='red')
legend('bottomright',c('prc','avg','up','down'),lty=c(1,1,1,1),col=c('black','blue','red','red'))
a=rsi(a)
a=a %>% filter(substr(date,1,4)=='2019')
plot(a$rsi~as.Date(a$date),type='l',ylab='Price',xlab='date',main='RSI',ylim=c(0,100))
abline(h=c(30,70),col='red')
a <- read_excel("Downloads/华为概念指数8841007.WI.xlsx")
substr(a$日期,1,4)
a$日期=NULL
names(a)=c('date','a1','a2','a3','prc','a4','a5','a6','a7')
a=a %>% select(date,prc)
for(t in 1:length(a$date)){
if (nchar(a$date[t])==9){
x=substr(a$date[t],6,6)
x=paste0(c('0',x),collapse='')
a$date[t]=paste0(c(substr(a$date[t],1,4),x,substr(a$date[t],8,9)),collapse = '-')
}else{
a$date[t]=paste0(c(substr(a$date[t],1,4),substr(a$date[t],6,7),substr(a$date[t],9,10)),collapse = '-')
}
}
a$date=as.Date(a$date)
a$prc=as.numeric(a$prc)
a=rsi(a)
a=a %>% filter(substr(date,1,4)=='2019')
plot(a$rsi~as.Date(a$date),type='l',ylab='Price',xlab='date',main='RSI',ylim=c(0,100))
abline(h=c(30,70),col='red')
a <- read_excel("Downloads/华为概念指数8841007.WI.xlsx")
substr(a$日期,1,4)
a$日期=NULL
names(a)=c('date','a1','a2','a3','prc','a4','a5','a6','a7')
a=a %>% select(date,prc)
for(t in 1:length(a$date)){
if (nchar(a$date[t])==9){
x=substr(a$date[t],6,6)
x=paste0(c('0',x),collapse='')
a$date[t]=paste0(c(substr(a$date[t],1,4),x,substr(a$date[t],8,9)),collapse = '-')
}else{
a$date[t]=paste0(c(substr(a$date[t],1,4),substr(a$date[t],6,7),substr(a$date[t],9,10)),collapse = '-')
}
}
a$date=as.Date(a$date)
a$prc=as.numeric(a$prc)
beiyong=a
a=sma50200(a)
a=a %>% filter(date>='2016-01-01')
plot(a$prc~a$date,type='l',ylab='prc',xlab='date',main='SMA')
lines(a$sma50~a$date,col='red')
lines(a$sma200~a$date,col='blue')
legend('topleft',c('prc','sma50','sma200'),lty=c(1,1,1),col=c('black','red','blue'))
install.packages(R.matlab)
install.packages('R.matlab')
library(R.matlab)
a=readMat('/Users/zhangdi/Downloads/MachineLearningEx-master/machine-learning-ex3/ex3/ex3data1.mat')
View(a)
a$X
ax=as.data.frame(a$X)
View(ax)
dim(ax)
ay=as.data.frame(a$y)
dim(ay)
View(ay)
a=read.csv('/Users/zhangdi/FIN 3380/L4/ff_daily.csv')
View(a)
a=read.csv('/Users/zhangdi/FIN 3380/L4/ff_daily.csv',skip=4)
View(a)
a$X=as.Date(a$X,'%Y%m%d')
library(tibbletime)
install.packages('tibbletime')
library(tibbletime)
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest','IRkernel'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest", "IRkernel"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest", "IRkernel"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest", "IRkernel"))
IRkernel::installspec()
IRkernel::installspec(user = FALSE)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
IRkernel::installspec()
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
install.packages(c("repr", "IRdisplay", "evaluate", "crayon", "pbdZMQ", "devtools", "uuid", "digest"))
devtools::install_github('IRkernel/IRkernel',force = TRUE)
install.packages("digest")
install.packages("digest")
install.packages("digest")
install.packages("digest")
devtools::install_github('IRkernel/IRkernel',force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(RPostgres)
load('/Users/zhangdi/FIN 3380/L2/crsp.sample.RData')
crsp.sample=crsp.sample %>% select(permno, date, ret)
summary=crsp.sample %>% group_by(permno) %>% summarise(n=n())
crsp.sample.wide=spread(crsp.sample,permno,ret)
crsp.sample=gather(crsp.sample.wide,permno,ret,-date)
summary=crsp.sample %>% group_by(permno) %>% summarise(n=n())
crsp.sample=crsp.sample %>% mutate(ret=ifelse(is.na(ret),0,ret))
# ifelse + is.na is important
crsp.sample=crsp.sample %>% mutate(date=as.character(date)) %>% mutate(yymm=substr(date,1,7)) %>%
group_by(permno,yymm) %>% mutate(cum=cumprod(ret+1)) %>% ungroup()
ew=crsp.sample %>% group_by(date) %>% summarise(cum=mean(cum),yymm=first(yymm))
ew.2010=ew %>% filter(yymm=='2010-02')
plot(ew.2010$cum~as.Date(ew.2010$date),type='l',ylab='return',xlab='date',main='ew for 2010-02')
#for the whole year
ew=ew %>% group_by(yymm) %>% arrange(date) %>% mutate(ret=cum/lag(cum,1)-1) %>% ungroup() %>%
mutate(ret=ifelse(is.na(ret),cum-1,ret)) %>% mutate(cum=cumprod(ret+1))
# cum-1 is important
plot(ew$cum~as.Date(ew$date),type='l',ylab='cum',xlab='date',main='whole period')
load('/Users/zhangdi/FIN 3380/L2/crsp.sample.RData')
crsp.ret=crsp.sample %>% select(permno,date,ret)
summary=crsp.ret %>% group_by(permno) %>% summarise(n=n())
crsp.ret=spread(crsp.ret,permno,ret)
crsp.ret=gather(crsp.ret,permno,ret,-date)
summary=crsp.ret %>% group_by(permno) %>% summarise(n=n())
crsp.ret=crsp.ret %>% mutate(ret=ifelse(is.na(ret),0,ret))
crsp.mq=crsp.sample %>% select(date,permno,prc,shrout) %>% mutate(mq=prc*shrout) %>% select(permno,date,mq) %>%
mutate(permno=as.character(permno))
#the permno in the downloaded data is numeric by default and we change it to the character type.
crsp.sample=crsp.ret %>% left_join(crsp.mq,by=c('permno','date'))
#syntax of left_join()
#do not need to handle the two NAs in mq (actually it is handled in mq1)
crsp.sample=crsp.sample %>% mutate(date=as.character(date),yymm=substr(date,1,7)) %>%
group_by(permno) %>% arrange(date) %>% mutate(mq1=lag(mq,1))  %>% ungroup() %>%
group_by(permno,yymm) %>% arrange(date) %>% mutate(cum=cumprod(ret+1),mq=first(mq1)) %>% ungroup() %>% filter(yymm!=first(yymm)) %>%
group_by(date) %>% mutate(wgt=mq/sum(mq,na.rm=T)) %>% ungroup() %>% mutate(ret=cum*wgt)
#lag the mq first, the NA in mq1 can be converted to 0 or add 'na.rm=T' in sum function.
#the html directly delete the first month of the first year
## steps:
### 1. add yymm (can also do this after step 2)
### 2. group_by permno --> mutate lag.mq
### 3. group_by permno,yymm --> mutate cumulative return & fix mq (the html deletes the first month and handles NAs in lag.me)
### 4. group_by date --> mutate weight & cumulative return under weight
### 5. create a new data.frame. group_by date --> summarise return & retain yymm
vw=crsp.sample %>% group_by(date) %>% summarise(ret=sum(ret),yymm=first(yymm))
vw.2010=vw %>% filter(yymm=='2010-02')
plot(vw.2010$ret~as.Date(vw.2010$date),type='l',ylab='ret',xlab='date',main='vw-2010-02')
vw=vw %>% group_by(yymm) %>% mutate(ret1=ret/lag(ret)-1) %>% ungroup() %>%
mutate(ret1=ifelse(is.na(ret1),ret-1,ret1)) %>% mutate(ret=cumprod(ret1+1))
plot(vw$ret~as.Date(vw$date),type='l',ylab='ret',xlab='date',main='whole period')
#sd over the entire period and each year
load('/Users/zhangdi/FIN 3380/L2/mystock.RData')
mystock=mystock %>% mutate(prc=ifelse(prc<=0,-prc,prc))
##prc problem in mystock
mystock=mystock %>% group_by(permno) %>% arrange(date) %>% mutate(ret=prc/lag(prc,1)-1) %>% mutate(sd.all=sd(ret,na.rm=T)) %>% ungroup()
mystock=mystock %>% mutate(date=as.Date(date), yy=substr(date,1,4)) %>% group_by(permno,yy) %>%
summarise(sd.yy=sd(ret,na.rm=T),sd.all=first(sd.all)) %>% ungroup()
#two asset
load('/Users/zhangdi/FIN 3380/L1/msft.aapl.RData')
weight.aapl=0.25
weight.msft=0.75
sd.aapl=sd(msft.aapl$aapl.ret)*sqrt(252)
sd.msft=sd(msft.aapl$msft.ret)*sqrt(252)
cov.ma=cov(msft.aapl$aapl.ret,msft.aapl$msft.ret)*252
cor.ma=cor(msft.aapl$aapl.ret,msft.aapl$msft.ret)
port.sd=sqrt(weight.aapl^2*sd.aapl^2+weight.msft^2*sd.msft^2+2*sd.aapl*sd.msft*cor.ma*weight.aapl*weight.msft)
#portfolio risk matrix
wgt=matrix(c(0.25,0.75),1)
##the function is matrix
cov.ma=cov(msft.aapl[,c('aapl.ret','msft.ret')])*252
##use c() to build cor matrix
##no need to convert cov.ma, it is matrix in deed.
port.sd=sqrt(wgt %*% cov.ma %*% t(wgt))
#multiple stocks
load('/Users/zhangdi/FIN 3380/L2/stock.id.RData')
load('/Users/zhangdi/FIN 3380/L2/mystock.RData')
mystock=mystock %>% group_by(permno) %>% arrange(date) %>% mutate(ret=prc/lag(prc,1)-1) %>% ungroup() %>%
mutate(ifelse(is.na(ret),0,ret))  %>% select(permno,date,ret)
id=stock.id
mystock=merge(mystock,id,by.x='permno',by.y='permno',all.x = T,all.y = T)
##important to memorize merge function
mystock=mystock[,-1]
##can also use select(-permno)
mystock=spread(mystock,ticker,ret)
mystock=mystock[complete.cases(mystock),]
##complete.cases() is needed for cov matrix
cov.ms=cov(mystock[,2:ncol(mystock)])*252
wgt= data.frame(ticker=c("AAPL","MSFT","IBM","BABA","GE","KO"),wgt = c(0.15,0.2,0.1,0.25,0.1,0.2))
wgt=wgt[order(wgt$ticker),]
wgt=matrix(wgt$wgt,1)
##order and matrix. no as.matrix()
sd.port=sqrt(wgt %*% cov.ms %*% t(wgt))
load('/Users/zhangdi/FIN 3380/L2/eq.bond.RData')
ef=data.frame(wgt.1=seq(0,1,0.1),wgt.2=seq(1,0,-0.1))
avg.e=mean(eq.bond$sp500)*12
avg.b=mean(eq.bond$bond10y)*12
sd.e=sd(eq.bond$sp500)*sqrt(12)
sd.b=sd(eq.bond$bond10y)*sqrt(12)
cor.p=cor(eq.bond$sp500,eq.bond$bond10y)
p=ef %>% mutate(ret.p=avg.e*wgt.1+avg.b*wgt.2,sd=sqrt(wgt.1^2*sd.e^2+wgt.2^2*sd.b^2+2*wgt.1*wgt.2*cor.p*sd.e*sd.b))
plot(p$ret.p~p$sd,type='l',ylab='ret',xlab='sd',main='ef',ylim=c(min(p$ret.p)-0.01,max(p$ret.p+0.01)),lwd=2)
gmv=p[which(p$sd==min(p$sd)),c('sd','ret.p')]
points(gmv,pch=19,col='red')
#gmv and points
p=p %>% mutate(rf=0.02,sr=(ret.p-rf)/sd)
cml=p[which(p$sr==max(p$sr)),]
load('/Users/zhangdi/FIN 3380/L2/ind.g.RData')
load('/Users/zhangdi/FIN 3380/L2/ind.g.price.RData')
names(ind.g.price)=c('gvkeyx','date','prc')
a=ind.g.price
a=a %>% mutate(date=as.Date(date),yy=substr(date,1,4)) %>%
group_by(gvkeyx,yy) %>% summarise(prc=last(prc)) %>% ungroup() %>%
group_by(gvkeyx) %>% arrange(yy) %>% mutate(ret=prc/lag(prc,1)-1) %>%
ungroup()
a=a %>% left_join(ind.g,by='gvkeyx')
summary=a %>% group_by(gvkeyx) %>% summarise(n=n())
a$ret[which(is.na(a$ret))]=0
library(ggplot2)
p=ggplot(a,aes(x=as.Date(yy,'%Y'),y=ret,color=tic))
#'%Y' is the format, it is necessary.
p=p+geom_line()
p=p+labs(x='Year',y='annual return')
p=p+theme(legend.position = 'bottom')
p=p+theme(legend.title = element_blank())
print(p)
##syntax for ggplot is important
##ggplot(df,aes(x,y,color)) + geom_line()/geom_point()/geom_bar() + labs(x,y,title) + theme +…
p=a %>% filter(tic %in% unique(tic)[1:4]) %>%
ggplot(aes(x=as.Date(yy,'%Y'),y=ret,color=tic)) + geom_line() +labs(x='year',y='ret') + theme(legend.position = 'bottom') +theme_bw()
print(p)
p=a %>% ggplot(aes(x=as.Date(yy,'%Y'),y=ret,color=tic))+geom_line()+labs(x='year',y='ret')+theme(legend.position = 'bottom')+theme_bw()+facet_wrap(facets=~tic)
## important!
print(p)
ret=a %>% select(yy,ret,tic)
ret=spread(ret,tic,ret)
ret=ret %>% select(-yy)
ret.mat=as.matrix(ret)
cov.r=cor(ret[,2:ncol(ret)])
summary(cov.r)
a=a %>% group_by(gvkeyx)  %>% arrange(yy) %>% mutate(cum=cumprod(ret+1)) %>% ungroup()
p=a %>% ggplot(aes(x=as.Date(yy,'%Y'),y=cum,color=tic)) + geom_line(size=1) + labs(y='cum',x='year') +theme(legend.position = 'bottom')+theme_bw()
print(p)
a=a %>% group_by(tic) %>% summarise(ret.mean=mean(ret),sd=sd(ret),sr=ret.mean/sd) %>% arrange(-sr)
p=ggplot(a,aes(x=a$sd,y=a$ret.mean)) + geom_point() + annotate('text',x=a$sd-0.01,y=a$ret.mean+0.01,label=a$tic) +labs(x='sd',y='ret.mean') + theme_bw()
print(p)
library(matrixcalc)
print(is.positive.definite(cov.r))
print(any(is.na(ret.mat)))
library(fPortfolio)
a=as.timeSeries(ret.mat)
ef=tangencyPortfolio(a)
print(ef)
wgt=ef@portfolio@portfolio$weights
as.data.frame(wgt)
wgt=matrix(wgt,nrow=length(wgt))
#remember!!!
#return and risk of the portfolio
port=as.matrix(a) %*% wgt
port
sharp=mean(port)/sd(port)
sharp
ef=portfolioFrontier(data=a)
tailoredFrontierPlot(object = ef,risk='Sigma',twoAssets = FALSE,sharpeRatio = FALSE)
setwd('/Users/zhangdi/FIN 3380/L4/')
a=load('crsp.beta.RData')
View(a)
View(crsp.beta)
a=crsp.beta
library(dplyr)
library(zoo)
library(tidyr)
a=a %>% spread(permno,ret)
dt=a$date
library(timeSeries)
ret.mat=as.timeSeries(a)
library(fPortfolio)
eff=portfolioFrontier(ret.mat)
eff=portfolioFrontier(data=ret.mat)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd('/Users/zhangdi/FIN 3380/L4/')
load('crsp.beta.RData')
crsp.beta$date=as.Date(crsp.beta$date)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
a=crsp.beta
library(dplyr)
library(zoo)
library(tidyr)
a=a %>% spread(permno,ret)
dt=a$date
library(timeSeries)
ret.mat=as.timeSeries(a)
library(fPortfolio)
eff=portfolioFrontier(data=ret.mat)
View(crsp.beta)
View(a)
library(dplyr)
library(zoo)
library(tidyr)
load('crsp.beta.RData')
crsp.beta$date=as.Date(crsp.beta$date)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
a=crsp.beta
library(zoo)
load('crsp.beta.RData')
library(dplyr)
library(zoo)
library(tidyr)
crsp.beta$date=as.Date(crsp.beta$date)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
library(RPostgres)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
library(dplyr)
library(zoo)
library(tidyr)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
setwd('/Users/zhangdi/FIN 3380/L4/')
load('crsp.beta.RData')
crsp.beta$date=as.Date(crsp.beta$date)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
a=crsp.beta
library(dplyr)
library(zoo)
library(tidyr)
library(RPostgres)
setwd('/Users/zhangdi/FIN 3380/L4/')
load('crsp.beta.RData')
crsp.beta$date=as.Date(crsp.beta$date)
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
a=crsp.beta
crsp.beta = crsp.beta %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
knitr::opts_chunk$set(echo = TRUE)
setwd('/Users/zhangdi/FIN 3380/L4/')
library(dplyr)
library(tidyr)
library(zoo)
load('crsp.beta.RData')
crsp.beta = crsp.beta %>% mutate(date=as.Date(date)) %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
View(crsp.beta)
a=crsp.beta
a=a %>% spread(permno,ret)
dt=a$date
setwd('/Users/zhangdi/FIN 3380/L4/')
library(dplyr)
library(tidyr)
library(zoo)
load('crsp.beta.RData')
crsp.beta = crsp.beta %>% mutate(date=as.Date(date)) %>% filter((date>='2008-01-01')&(date<'2011-01-01'))
a=crsp.beta
a=a %>% spread(permno,ret)
dt=a$date
ret.mat=as.timeSeries(a)
library(fPortfolio)
eff=portfolioFrontier(data=ret.mat)
eff.min=minvariancePortfolio(data=ret.mat)
wgt=eff.min@portfolio@portfolio$weights
wgt
Sys.setenv(RETICULATE_PYTHON = '/Library/Frameworks/Python.framework/Versions/3.7/bin/python3')
knitr::opts_chunk$set(echo = TRUE)
